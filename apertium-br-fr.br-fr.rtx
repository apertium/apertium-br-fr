!!! ATTRIBUTES
a_nom = n "n.acr" "n.unc" "np.loc" "np.top" "np.ant" "np.al" ;
a_np_acr = np acr ;
grau_adj = comp sup ;
a_adj = adj "adj.pos" "adj.itg" "adj.ind" "vblex.pp" ;
a_det = "det.dem" "det.ind" "det.def" "det.pos" predet num ;
a_num = num "num.percent" "num.ord" ;
a_verb = vblex vbser vbhaver vbmod ;
a_part = obj subj opt neg ger ppres ref ;
a_adv = adv preadv "adv.itg" ;
a_pp = "vblex.pp" ;
a_prn = prn ;
a_rel = rel "rel.adv" ;
tipus_prn = subj rel "rel.adv" "rel.nn" obj ind ref tn "tn.ref" itg pos pro ;
tipoenc_pro = "ref.p3.mf.sp" "p1.mf.pl" "p1.mf.sg" "p2.mf.pl" "p2.mf.sg" "p3.f.pl" "p3.f.sg" "p3.mf.pl" "p3.mf.sg" "p3.m.pl" "p3.m.sg" "p3.nt" "mf.sg" adv ;
pers = (p3 p3) p1 impers p2 p3 ;
gen = (GD m) m f @mf nt GD ;
gen_sense_mf = m f GD nt ;
gen_mf = mf ;
nbr = (ND sg) sg pl @sp ND ;
nbr_sense_sp = sg pl ND ;
nbr_sp = sp ;
temps_fin = cip cni fti ifi imp pii pis pri prs prh pih past ;
temps = [temps_fin] pp ger inf ppres ;
neg = neg ;
syn_label = @X @←SUBJ @SUBJ→ @\+FMAINV @-FMAINV ;

!!! LEMMA LISTS
verbref_iv_meta = brañsellat brañskellat digoumanantiñ koumanantiñ sevel ;
verbref_meta = approprier arrêter asseoir baigner balancer "baser# sur" "connecter# à" ébattre efforcer enorgueillir évanouir "faire# un nom" "former# en étang" fouler garer masturber "mettre# en colère" "mettre# en relation" "occuper# de" "passer# de" plaindre plaire "porter# candidat" réapproprier "rendre# compte" reposer pavaner souvenir tromper vanter ;
vbambser = accourir advenir affliger aller allonger apparaître arriver cacher connaître décéder descendre développer devenir entrer établir étendre imposer intervenir inviter monter mourir naître partir parvenir passer préoccuper rassasier reconnaître redescendre remonter rentrer repartir ressortir rester retomber revenir sortir tomber "tomber# amoureux" venir ;
dias = Lun Merc’her Meurzh Sul Yaou Gwener Sadorn ;
substances = aluminiom amann aour arc’hant arem argant bara bleud dir eoul fred greunit holen houarn koad koar metal neud paper pebr plom sklent sukr ;

!meses = Genver C’hwevrer Meurzh Ebrel Mae Mezheven Gouere Gouhere Eost Gwengolo Here Du Even Kerzu
!"miz Genver" "miz C’hwevrer" "miz Meurzh" "miz Ebrel" "miz Mae" "miz Mezheven" "miz Gouere" "miz Gouhere" "miz Eost" "miz Gwengolo" "miz Here" "miz Even" "miz Du" "miz Kerzu" ;

meses = genver c’hwevrer meurzh ebrel mae mezheven gouere gouhere eost gwengolo here du even kerzu
"miz genver" "miz c’hwevrer" "miz meurzh" "miz ebrel" "miz mae" "miz mezheven" "miz gouere" "miz gouhere" "miz eost" "miz gwengolo" "miz here" "miz even" "miz du" "miz kerzu" ;


advneg = pas jamais ;
advmod = ac’hub a-walc’h bras espar eston fin kenañ ken-ha-ken klok krak lip mat mik poch rik tre ;
part_sing = alcool argent beurre bière café chance chanvre chouchenn cire eau farine genêt herbe huile lambig lessive limonade marbre or pain plaisir poivre sel sucre tabac thé vanille viande vin vinaigre travail ;
nom_indef_paire = botez lunedoù maneg ;
npf = Afrique "Afrique du Sud" Algérie Allemagne Alsace Amérique Andalousie Andorre Angleterre Arabie Argentine Asie Australie Autriche Autriche-Hongrie Belgique Biscaye Biélorussie Bolivie Bosnie Bretagne Basse-Bretagne Haute-Bretagne Bulgarie Cantabrie Caraïbe Catalogne Chine Colombie Corée Cornouaille Corse Croatie Corse Égypte Espagne Estonie Europe Estrémadure Éthiopie Finlande France Galice Grande-Bretagne Grenade Grèce Guadeloupe Guinée Guyane "Guyane Française" Hollande Hongrie Inde Indonésie Irlande Islande Italie Jamaïque Jordanie Libye Lituanie Lorraine Malte Martinique Navarre Norvège Nouvelle-Zélande Palestine Pennsylvanie Pologne Rioja Roumanie Russie Serbie Slovaquie Slovénie Somalie Suisse Suède Syrie Tanzanie Tchétchénie Thaïlande Tunisie Turquie Ukraine "Union Européenne" Yougoslavie Zélande ;
npm = Afghanistan Alger Amsterdam Atlantique Atlas Bangladesh Bernabéu Brésil Cameroun Canada Caucase Chili Congo Danemark Elysée Etna Gabon Goëlo Guatemala Gujarat Irak Iran Japon Kenya Koweït Kurdistan Leon Léon Liban Luxembourg Maghreb Mali Mexique Monténégro Nicaragua Niger Nigeria Népal Ouganda Pakistan Panama Panamá Paraguay "Pays Basque" "Pays de Galles" Portugal Pérou Qatar Royaume-Uni Rwanda Soudan Sénégal Stromboli Tchad Uruguay Vatican Venezuela "Viêt nam" Équateur Trégor ;
nppl = Açores Antilles Alpes Andes Alpes-Maritimes Amériques Asturies Baléares Canaries Côtes-d’Armor Côtes-du-Nord États-Unis "EE.UU." Philippines Pyrénées Pyrénées-Atlantiques USA ;
menezioù = Alpoù Pireneoù "Menezioù Roc’hellek" Andoù ;
broioùbreizh = bro-Bentevr bro-Borc’hoed bro-Dinan bro-Dreger bro-Gemper bro-Gemperle bro-Gerne bro-Gernev bro-Gwened bro-Leon bro-Naoned bro-Oueloù bro-Pourlet bro-Roazhon bro-Sant-Brieg bro-Sant-Maloù bro-Vigoudenn bro-Vrest bro-Wened bro-Zol ;
adv_colloc_abans = assez très particulièrement ;
adj_colloc_abans = autre beau bon dernier deuxième grand gros jeune joli lourd mauvais meilleur moindre nouveau petit pire premier second vieux vrai seul ;

demonstrativo_lemmas = se mañ hont ;

!!! TAG PATTERNS
n: a_nom.gen.nbr;
adj: a_adj.gen.nbr;
np_ant: a_nom.gen.nbr;
np: a_nom;
np_top: a_nom;
det_: a_det.gen.nbr;
det: (always 1(det_)[nbr=(if (1.nbr = sp) sp else 1.nbr),
                     gen=(if ((1.gen = mf) and (1.nbr = sg)) m else 1.gen)]);
predet: (always 1(det));

vb_impers: a_verb.temps;
vb_pers: a_verb.temps.pers.nbr;
temps_impers = inf ger ;
vblex: (if (1.temps in temps_impers) 1(vb_impers)
        else 1(vb_pers)[nbr=(if (1.nbr = sp) sg else 1.nbr)]);

cnjcoo: _;
num: _.gen.nbr;
adv: a_adv;
adv_neg: a_adv.neg;
pr: _;
preadv: _;

prn: _.tipus_prn.pers.gen.nbr;
prn_impers: _.tipus_prn.gen.nbr;

temps > temps : pih pii, prh pri, past ifi, cip cni ;

ANT: _; ! treat as ant<SN><sg>
ANT -> np.ant { (if (1.tags/tl = "np.ant") 1(np) else 1(np_ant)) } |
       ANT np.ant { 1 _ 2(np_ant) } ;

le: (always le(det)[a_det="det.def",lemcase=1.lemcase,
                    gen=(if (1.nbr = pl) mf
					     if (1.gen = f) f
						 else m),
				    nbr=(if (1.nbr = pl) pl
					     else sg)]);

ce: (always ce(det)[a_det="det.dem",lemcase=1.lemcase,
                    gen=(if (1.nbr = pl) mf
					     if (1.gen = f) f
						 else m),
				    nbr=(if (1.nbr = pl) pl
					     else sg)]);

AP: _.a_adj.gen.nbr.grau_adj;
AP -> %adj { (if (1.grau_adj/sl = sup) [ %*(le) _ ])
             (if (1.grau_adj/sl not = "")
			     (if (1.grau_adj/sl = sup) [ plus@preadv _ ]
				  else [ plus(preadv)[lemcase=$lemcase] _ ]))
             1[gen=(if (1.gen/tl = mf) mf
			        if ($gen = mf) m
					else $gen),
			   nbr=(if (1.nbr/tl = sp) sp
			        if ($nbr = sp) sg
					else $nbr),
			   lemcase=(if (1.grau_adj/sl = "") $lemcase else aa)]
		   } |
      %vblex.pp { %1(adj)[lemcase=$lemcase] } |
	  %bezañ@vblex.pp vblex.pp { %1(adj)[lemcase=$lemcase] _ %2(adj) } |
	  %AP ha@cnjcoo AP [$lem=adj_cnj_adj] { %1[lemcase=$lemcase] _ 2 _ %3 } |
	  nemet@pr indirect@prn [$lem=seul,$a_adj=adj,$grau_adj=""] { %seul(adj) } ;

NA: _.gen.nbr;
NA -> %n.$lem/sl [$nbr=(if (1.nbr/tl not = sp) 1.nbr/tl
                        if (1.nbr/sl not = sp) 1.nbr/sl
						else sg),
				  $gen=(if (1.gen/tl not = mf) 1.gen/tl
				        if (1.gen/sl not = mf) 1.gen/sl
						else m)]
				 { %1[lemcase=$lemcase] } |
	  %NA n.acr { %1[lemcase=$lemcase] _ 2 } |
	  %NA AP { (if ((2.lem incl adj_colloc_abans) and (2.grau_adj = ""))
	               [ %2[lemcase=$lemcase] _ %1[lemcase=aa] ]
				else [ %1[lemcase=$lemcase] _ %2 ]) } ;

TOP: _.gen.nbr;
TOP -> np.top [$gen=(if (1.lem/tl incl npm) m
                     if (1.lem/tl incl npf) f
			         else mf),
	           $nbr=(if (1.lem/tl incl nppl) pl
	                 else sg),
			   $lem=(if (1.lem/sl incl menezioù) use_dans
			         if (1.lem/sl incl broioùbreizh) use_dans
					 else 1.lem/tl)]
		  { 1(np_top) } ;

definite = (indef indef) def indef ;
NP: _.gen.nbr.definite;
NP -> %NA { %1[lemcase=$lemcase] } |
      %NP NA { %1[lemcase=$lemcase] _
	           (if (2.lem incl substances) en@pr else de@pr) _
			   (if ($definite = def) [ 2(le) _ ])
			   2 } |
      %NP np.al { %1 _ 2 } |
      %NP np.loc { %1 _ de@pr _ 2 } |
      %NP TOP [$definite=def]
	      { %1[lemcase=$lemcase] _ de@pr _ 2(le)[lemcase=aa] _ 2 } |
	  num a@pr %[meses]@NA { %1 _ %3 } ;

np_add_le = [npm] [nppl] ; ![npf]

PP: _;
PP -> pr TOP { (if (2.lem equalcl use_dans) 1[lem=dans,lemcase=$lemcase]
                if (2.lem incl np_add_le) 1[lem=à,lemcase=$lemcase]
				if (2.lem incl npf) 1[lem=en,lemcase=$lemcase]
				else 1[lem=à,lemcase=$lemcase])
			   (if (2.lem in np_add_le) [ _ 2(le) ])
			   _ 2 } |
	  pr Det TOP { (if (3.lem equalcl use_dans) 1[lem=dans,lemcase=$lemcase]
                    if (3.lem incl np_add_le) 1[lem=à,lemcase=$lemcase]
					if (2.lem incl npf) 1[lem=en,lemcase=$lemcase]
				    else 1[lem=à,lemcase=$lemcase])
				   _ 2[gen=3.gen,nbr=3.nbr] _ 3 } ;

Det: _.a_det.gen.nbr;
Det -> %det { 1[gen=(if (1.gen/tl = mf) mf
			         if ($gen = mf) m
				  	 else $gen),
		 	    nbr=(if (1.nbr/tl = sp) sp
			         if ($nbr = sp) sg
					 else $nbr),
				lemcase=$lemcase] } ;

pers_no_default = p1 p2 p3;

DP: _.pers.gen.nbr.definite;
prnpos_lemmas = "e hini" "o hini" "ma hini" "da hini" "he hini" "ho hini" "hon hini" ;
prn_pos_f = "le mien" "le tien" "le sien" ;
DP -> Det %NP [$pers=p3,$nbr=(if (1.nbr = pl) pl else 2.nbr)]
   	  	  { %1[lemcase=$lemcase] _ %2 } |
   	  ANT [$pres=p3,$gen=m,$nbr=sg] { 1 } |
	  TOP [$pres=p3,$gen=m,$nbr=sg] { 1 } |
	   %NP DP { %*(le)[lemcase=$lemcase] _ %1[lemcase=aa,definite=def] _ de@pr _ 2[definite=def] } |
	   num %NP DP { 1 _ %2[definite=def,nbr=1.nbr] _ de@pr _ 3[definite=def] } |
	   Det %NP DP { %1 _ %2 _ de@pr _ 3 } |
	   num.$nbr %NP { 1 _ %2 } |
	   Det num.$nbr %NP { %1 _ 2 _ %3 } |
	   Det AP %NP { %1 _ %2 _ %3 } |
	   Det predet %NP { %2[lemcase=$lemcase] _ %1[lemcase=2.lemcase] _ %3 } |
	   num.$nbr eus@pr %DP { 1[gen=(if (3.gen = mf) m else 3.gen)] _ 2 _ 3 } |
	   Det %NP Det.det.dem { %3 _ %2 } |
	   Det %NP [demonstrativo_lemmas]@adv { %*(ce)[lemcase=$lemcase] _ %2 } |
	   Det num.$nbr %NP [demonstrativo_lemmas]@adv { %*(ce)[lemcase=$lemcase] _ 2 _ %3 } |
	   %NP { (if ($definite = def) [ %*(le)[lemcase=$lemcase] _ ])
	         %1[lemcase=(if ($definite = def) aa else $lemcase)] } |
	   2: AP.*.sup %NP { %1 _ %2 } |
	   %prn ?(1.tipus_prn/sl not = rel)
	   		{ (if (1.pers_no_default/tl = "") %1(prn_impers) else %1) } |
	   Det %TOP [$definite=def] { %1[lemcase=$lemcase] _ 2 } ;

pclt: tags;
dir_pronoun: (if (1.obj_prn = o1sg)
                 me(pclt)[lemcase=1.lemcase,tags="prn.pro.p1.mf.sg"]
			  if (1.obj_prn = o1pl)
			     nous(pclt)[lemcase=1.lemcase,tags="prn.pro.p1.mf.pl"]
			  if (1.obj_prn = o2sg)
			     te(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.sg"]
			  if (1.obj_prn = o2pl)
			     vous(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.pl"]
			  if (1.obj_prn = o3sgm)
			     le(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.m.sg"]
			  if (1.obj_prn = o3sgf)
			     le(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.f.sg"]
			  else le(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.mf.pl"]);
ind_pronoun_pro: (if (1.ind_prn = i1sg)
                     moi(pclt)[lemcase=1.lemcase,tags="prn.tn.p1.mf.sg"]
				  if (1.ind_prn = i1pl)
				     nous(pclt)[lemcase=1.lemcase,tags="prn.pro.p1.mf.pl"]
			  	  if (1.ind_prn = i2sg)
			         te(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.sg"]
			      if (1.ind_prn = i2pl)
			         vous(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.pl"]
			      if (1.ind_prn = i3sgm)
			         lui(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.mf.sg"]
			      if (1.ind_prn = i3sgf)
			         lui(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.mf.sg"]
			      else leur(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.mf.pl"]);
ind_pronoun_enc: (if (1.ind_prn = i1sg)
                     moi(pclt)[lemcase=1.lemcase,tags="prn.tn.p1.mf.sg"]
				  if (1.ind_prn = i1pl)
				     nous(pclt)[lemcase=1.lemcase,tags="prn.pro.p1.mf.pl"]
			  	  if (1.ind_prn = i2sg)
			         toi(pclt)[lemcase=1.lemcase,tags="prn.tn.p2.mf.sg"]
			      if (1.ind_prn = i2pl)
			         vous(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.pl"]
			      if (1.ind_prn = i3sgm)
			         lui(pclt)[lemcase=1.lemcase,tags="prn.pro.p3.mf.sg"]
			      if (1.ind_prn = i3sgf)
			         il(pclt)[lemcase=1.lemcase,tags="prn.tn.p3.f.sg"]
			      else eux(pclt)[lemcase=1.lemcase,tags="prn.tn.p3.m.pl"]);
ind_to_subj: (if (1.ind_prn = i1sg)
                 moi(pclt)[lemcase=1.lemcase,tags="prn.tn.p1.mf.sg"]
		      if (1.ind_prn = i1pl)
			     nous(pclt)[lemcase=1.lemcase,tags="prn.pro.p1.mf.pl"]
		  	  if (1.ind_prn = i2sg)
		         tu(pclt)[lemcase=1.lemcase,tags="prn.tn.p2.mf.sg"]
		      if (1.ind_prn = i2pl)
		         vous(pclt)[lemcase=1.lemcase,tags="prn.pro.p2.mf.pl"]
		      if (1.ind_prn = i3sgm)
		         il(pclt)[lemcase=1.lemcase,tags="prn.tn.p3.m.sg"]
		      if (1.ind_prn = i3sgf)
		         il(pclt)[lemcase=1.lemcase,tags="prn.tn.p3.f.sg"]
		      else il(pclt)[lemcase=1.lemcase,tags="prn.tn.p3.m.pl"]);

obj_prn = o1sg o1pl o2sg o2pl o3sgm o3sgf o3pl;
ind_prn = i1sg i1pl i2sg i2pl i3sgm i3sgf i3pl;
prn_alone = o2sg o2pl o1pl;
prn_swap = o3sgm o3sgf o3pl i1pl i2sg i2pl;

V: _.temps.pers.nbr.gen.obj_prn.ind_prn;
V -> %vblex.$lem/sl
       [$obj_prn=(if (1.lem/tl incl verbref_meta)
	                 (if (1.pers = p1)
					     (if (1.nbr = pl) o1pl else o1sg)
					  if (1.pers = p2)
					     (if (1.nbr = pl) o2pl else o2sg)
					  if (1.nbr = pl) o3pl
					  else o1sgm) !TODO?
		 		  else "")]
       {
          (if (($obj_prn in prn_swap) and ($ind_prn in prn_swap))
		      [ %*(ind_pronoun_pro)[lemcase=$lemcase] _
			    %*(dir_pronoun)[lemcase=aa] _ ]
		   else
		      [ (if ($obj_prn not = "") [ %*(dir_pronoun)[lemcase=$lemcase] _ ])
			    (if (($obj_prn not in prn_alone) and ($ind_prn not = ""))
				    [ %*(ind_pronoun_pro)[lemcase=(if ($obj_prn = "") $lemcase
					                               else aa)]
		              _ ]) ])
          (if ($lemh equalcl 1.lemh/sl)
		      %1[lemcase=(if (($obj_prn = "") and ($ind_prn = "")) $lemcase
			              else aa)]
           else %1[lemh=$lemh,lemq=$lemq,
		           lemcase=(if (($obj_prn = "") and ($ind_prn = "")) $lemcase
			                else aa)])
		  (if (($ind_prn not = "") and ($obj_prn in prn_alone))
		      [ _ à@pr _ %*(ind_pronoun_enc)[lemcase=aa] ])
     } |
	 %vbloc.$lem/sl { %1(vblex)[lemcase=$lemcase] } |
	 10: adv.neg %V ket@adv { 1[lemcase=$lemcase] _ %2[lem=$lem] _ 3 } |
	 adv.neg %V { 1[lemcase=$lemcase] _ %2 } |
	 %V adv { %1[lemcase=$lemcase,lem=$lem] _ 2 } |
	 o@vpart.ger.$lemcase/sl %V.inf
	      [$lem=(if (2.lem equalcl mont) aller else en_train_de)]
	 	  { (if (2.lem equalcl mont)
		        []
		     if ($lem equalcl en_train_de)
		        [ en(pr)[lemcase=$lemcase] _ train@n.m.sg _ de@pr _ ]
			 if ($lem equalcl aller)
			    [ aller(pclt)[lemcase=$lemcase,tags="vblex.pp.m.sg"] _ ])
			%2[lemcase=aa] } |
	 %bezañ@V être@AP.vblex.pp en_train_de@V.inf
	      { %1[lemcase=$lemcase] _ 3[lem=aller] } |
	 30: être@AP.vblex.pp %bezañ@V en_train_de@V
	      { %2[lemcase=$lemcase,obj_prn="",ind_prn=""] _
		    3[obj_prn=(if (3.obj_prn not = "") 3.obj_prn else $obj_prn),
			  ind_prn=(if (3.ind_prn not = "") 3.ind_prn else $ind_prn),
			  lem=aller] } |
	 %bezañ@V aller@V.inf { %2 } |
	 AP.vblex.pp %kaout@V
	      { %2[lemcase=$lemcase,
	           ind_prn=(if ($obj_prn in prn_alone) "" else $ind_prn)]
		    _ 1[lemcase=aa]
			(if (($obj_prn in prn_alone) and ($ind_prn not = ""))
			    [ _ à@pr _  %*(ind_pronoun_enc)[lemcase=aa] ])
		   } |
	 %kaout@V AP.vblex.pp
	       { %1[lemcase=$lemcase,
	           ind_prn=(if ($obj_prn in prn_alone) "" else $ind_prn)]
		    _ 2[lemcase=aa]
			(if (($obj_prn in prn_alone) and ($ind_prn not = ""))
			    [ _ à@pr _  %*(ind_pronoun_enc)[lemcase=aa] ])
		   } |
	 V.inf a@vpart %ober@vblex { %1[lemcase=$lemcase] } |
	 nécessaire@AP %bezañ@vblex [$lem=falloir]
	     { %falloir(vblex)[a_verb=vbmod] } |
	 %bezañ@V V.inf.$lem
	    { (if (2.lem equalcl aller) %2[lemcase=$lemcase]
		   else
		      [ %1(vblex)[lemcase=$lemcase,obj_prn="",ind_prn=""] _
	             2[obj_prn=$obj_prn,ind_prn=$ind_prn] ] )
		} |
	 %aller@V da@pr V.inf { %1 _ 3 } |
	 e@vpart.obj %V [$lemcase=1.lemcase/sl] { %2 } |
	 %bezañ@V AP.vblex.pp.$lem
	       { (if ((2.lem incl vbambser) or (1.temps = fti))
		   	 	 [ %1[lemcase=$lemcase] _
				   2[nbr=(if ($nbr not = sg) $nbr else 2.nbr),
		  		     gen=(if (2.gen = f) f else $gen)]
				 ]
			  else
			     [ %1[lemcase=$lemcase,lem=avoir] _ 2 ])
			} |
	 V.inf %bezañ@vbloc { 2(vblex)[lemcase=$lemcase] _
	                      1[lemcase=aa,obj_prn=$obj_prn,ind_prn=$ind_prn] } |
	 %"mont a ober"@V da@pr V.inf
	       { %1[lemcase=$lemcase,obj_prn="",ind_prn=""] _
		     3[obj_prn=(if (3.obj_prn not = "") 3.obj_prn else $obj_prn),
			   ind_prn=(if (3.ind_prn not = "") 3.ind_prn else $ind_prn)] } |
	 "en ur"@vpart %V.inf [$temps=ger] { en@pr _ %2 } |
	 %V direct@prn [$obj_prn=(if (2.pers = p1)
	                             (if (2.nbr = sg) o1sg else o1pl)
							  if (2.pers = p2)
							     (if (2.nbr = sg) o2sg else o2pl)
							  if (2.nbr = pl) o3pl
							  if (2.gen = f) o3sgf
							  else o3sgm)]
	         { %1[lemcase=$lemcase] } |
	 %V da@pr indirect@prn [$ind_prn=(if (3.pers = p1)
	                                     (if (3.nbr = sg) i1sg else i1pl)
							          if (3.pers = p2)
							             (if (3.nbr = sg) i2sg else i2pl)
							          if (3.nbr = pl) i3pl
							          if (3.gen = f) i3sgf
							          else i3sgm)]
	         { %1[lemcase=$lemcase] } ;

ind_p1 = i1sg i1pl;
ind_p2 = i2sg i2pl;
ind_p3 = i3sgm i3sgf i3pl;
ind_sg = i1sg i2sg i3sgm i3sgf;
ind_pl = i1pl i2pl i3pl;

VP: _.temps.pers.nbr.gen;
VP -> %V { %1[lemcase=$lemcase] } |
	  %bezañ@V AP.adj { %1 _ 2 } |
	  %falloir@V.*.[ind_prn] V.inf [$pers=p3,$nbr=sg]
	       { %1[lemcase=$lemcase,ind_pro=""] _ que@rel.mf.sp _
		     *(ind_to_subj)[lemcase=aa,ind_prn=1.ind_prn] _
			 2[temps=prs,pers=(if (1.ind_prn in ind_p1) p1
			                   if (1.ind_prn in ind_p2) p2
							   else p3),
			   nbr=(if (1.ind_prn in ind_sg) sg else pl)] } |
	  %bezañ@V Det AP.*.sup { %1[nbr=(if ($nbr = sp) sg else $nbr)] _ 3 } |
	  da@pr %VP.inf { 2 } |
	  %klask@VP VP.inf.$lem { %1 _ à@pr _ 2 } |
	  poent@n %bezañ@vblex V.*.inf
	      { %2[lemcase=$lemcase] _ temps@n.m.sp _ de@pr _ 3 } ;

subj_prn: (if (1.pers = impers)
              (if (1.lemcase not = aa) [ On@prn.pro.ref.p3.mf.sp _ ]
			   else [ on@prn.pro.ref.p3.mf.sp _ ])
		   else
		      [ *(prn)[tipus_prn=tn,pers=1.pers,lemcase=1.lemcase,nbr=1.nbr,
			           gen=(if (1.pers = p3)
					           (if (1.gen = f) f else m)
							else mf),
					   lem=(if (1.pers = p3) il
					        if (1.pers = p2)
							   (if (1.nbr = pl) vous else tu)
						    if (1.nbr = pl) nous
							else je)] _ ] );

S: _;
S -> 1: VP.[temps_fin] { 1(subj_prn)
          (if (1.pers = impers) 1[lemcase=aa,pers=p3,nbr=sg]
		   else 1[lemcase=aa]) } |
	 DP VP ?(1.pers = 2.pers) { 1 _ 2[gen=1.gen,nbr=1.nbr] } |
	 VP.*.neg DP { 2[lemcase=$lemcase] _ 1[lemcase=aa] } |
	 17: DP a@vpart VP { 1 _ (if ((3.pers = p3) and (3.nbr = sg))
	                         3[pers=1.pers,nbr=1.nbr,gen=1.gen]
						  else 3) } |
	 AP bezañ@V DP { 3[lemcase=Aa] _ 2 _ 1[lemcase=aa,gen=3.gen] } |
	 AP bezañ@V
	    { 2(subj_prn)[lemcase=$lemcase] 2[lemcase=aa] _ 1[lemcase=aa] } |
	 VP DP VP.inf { 2[lemcase=$lemcase] _ 1[lemcase=aa,nbr=2.nbr] _ 3 } |
	 DP.p3 "en em"@vpart.ref VP.*.p3
	    { 1[lemcase=$lemcase] _ se@prn.pro.ref.p3.mf.sp _ 3[nbr=1.nbr] } |
	 S pr ANT { 1 _ 2 _ 3 } ; !@HACK

blah: _;
blah -> vpart { } ;

NNNNN: _;
NNNNN -> S NNNNN { 1 } ; !@HACK